/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>

#import "type.h"

#import "service.h"


@implementation serviceConstants
+ (void) initialize {
}
@end

@interface login_by_mail_args : NSObject <NSCoding> {
  int64_t __client_id;
  NSString * __client_secret;
  NSString * __mail;
  NSString * __password;

  BOOL __client_id_isset;
  BOOL __client_secret_isset;
  BOOL __mail_isset;
  BOOL __password_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=client_id, setter=setClient_id:) int64_t client_id;
@property (nonatomic, retain, getter=client_secret, setter=setClient_secret:) NSString * client_secret;
@property (nonatomic, retain, getter=mail, setter=setMail:) NSString * mail;
@property (nonatomic, retain, getter=password, setter=setPassword:) NSString * password;
#endif

- (id) initWithClient_id: (int64_t) client_id client_secret: (NSString *) client_secret mail: (NSString *) mail password: (NSString *) password;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int64_t) client_id;
- (void) setClient_id: (int64_t) client_id;
- (BOOL) client_idIsSet;

- (NSString *) client_secret;
- (void) setClient_secret: (NSString *) client_secret;
- (BOOL) client_secretIsSet;

- (NSString *) mail;
- (void) setMail: (NSString *) mail;
- (BOOL) mailIsSet;

- (NSString *) password;
- (void) setPassword: (NSString *) password;
- (BOOL) passwordIsSet;

@end

@implementation login_by_mail_args

- (id) initWithClient_id: (int64_t) client_id client_secret: (NSString *) client_secret mail: (NSString *) mail password: (NSString *) password
{
  self = [super init];
  __client_id = client_id;
  __client_id_isset = YES;
  __client_secret = [client_secret retain];
  __client_secret_isset = YES;
  __mail = [mail retain];
  __mail_isset = YES;
  __password = [password retain];
  __password_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"client_id"])
  {
    __client_id = [decoder decodeInt64ForKey: @"client_id"];
    __client_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"client_secret"])
  {
    __client_secret = [[decoder decodeObjectForKey: @"client_secret"] retain];
    __client_secret_isset = YES;
  }
  if ([decoder containsValueForKey: @"mail"])
  {
    __mail = [[decoder decodeObjectForKey: @"mail"] retain];
    __mail_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain];
    __password_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__client_id_isset)
  {
    [encoder encodeInt64: __client_id forKey: @"client_id"];
  }
  if (__client_secret_isset)
  {
    [encoder encodeObject: __client_secret forKey: @"client_secret"];
  }
  if (__mail_isset)
  {
    [encoder encodeObject: __mail forKey: @"mail"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
}

- (void) dealloc
{
  [__client_secret release];
  [__mail release];
  [__password release];
  [super dealloc];
}

- (int64_t) client_id {
  return __client_id;
}

- (void) setClient_id: (int64_t) client_id {
  __client_id = client_id;
  __client_id_isset = YES;
}

- (BOOL) client_idIsSet {
  return __client_id_isset;
}

- (void) unsetClient_id {
  __client_id_isset = NO;
}

- (NSString *) client_secret {
  return [[__client_secret retain] autorelease];
}

- (void) setClient_secret: (NSString *) client_secret {
  [client_secret retain];
  [__client_secret release];
  __client_secret = client_secret;
  __client_secret_isset = YES;
}

- (BOOL) client_secretIsSet {
  return __client_secret_isset;
}

- (void) unsetClient_secret {
  [__client_secret release];
  __client_secret = nil;
  __client_secret_isset = NO;
}

- (NSString *) mail {
  return [[__mail retain] autorelease];
}

- (void) setMail: (NSString *) mail {
  [mail retain];
  [__mail release];
  __mail = mail;
  __mail_isset = YES;
}

- (BOOL) mailIsSet {
  return __mail_isset;
}

- (void) unsetMail {
  [__mail release];
  __mail = nil;
  __mail_isset = NO;
}

- (NSString *) password {
  return [[__password retain] autorelease];
}

- (void) setPassword: (NSString *) password {
  [password retain];
  [__password release];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release];
  __password = nil;
  __password_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setClient_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClient_secret: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"login_by_mail_args"];
  if (__client_id_isset) {
    [outProtocol writeFieldBeginWithName: @"client_id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __client_id];
    [outProtocol writeFieldEnd];
  }
  if (__client_secret_isset) {
    if (__client_secret != nil) {
      [outProtocol writeFieldBeginWithName: @"client_secret" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __client_secret];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mail_isset) {
    if (__mail != nil) {
      [outProtocol writeFieldBeginWithName: @"mail" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __mail];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"login_by_mail_args("];
  [ms appendString: @"client_id:"];
  [ms appendFormat: @"%qi", __client_id];
  [ms appendString: @",client_secret:"];
  [ms appendFormat: @"\"%@\"", __client_secret];
  [ms appendString: @",mail:"];
  [ms appendFormat: @"\"%@\"", __mail];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Login_by_mail_result : NSObject <NSCoding> {
  AuthResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) AuthResponse * success;
#endif

- (id) initWithSuccess: (AuthResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (AuthResponse *) success;
- (void) setSuccess: (AuthResponse *) success;
- (BOOL) successIsSet;

@end

@implementation Login_by_mail_result

- (id) initWithSuccess: (AuthResponse *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (AuthResponse *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (AuthResponse *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          AuthResponse *fieldValue = [[AuthResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Login_by_mail_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Login_by_mail_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface logout_args : NSObject <NSCoding> {
  NSString * __access_token;

  BOOL __access_token_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
#endif

- (id) initWithAccess_token: (NSString *) access_token;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

@end

@implementation logout_args

- (id) initWithAccess_token: (NSString *) access_token
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"logout_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"logout_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Logout_result : NSObject <NSCoding> {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation Logout_result

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Logout_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Logout_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface user_get_args : NSObject <NSCoding> {
  NSString * __access_token;
  int64_t __gid;

  BOOL __access_token_isset;
  BOOL __gid_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
@property (nonatomic, getter=gid, setter=setGid:) int64_t gid;
#endif

- (id) initWithAccess_token: (NSString *) access_token gid: (int64_t) gid;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

- (int64_t) gid;
- (void) setGid: (int64_t) gid;
- (BOOL) gidIsSet;

@end

@implementation user_get_args

- (id) initWithAccess_token: (NSString *) access_token gid: (int64_t) gid
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __gid = gid;
  __gid_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"gid"])
  {
    __gid = [decoder decodeInt64ForKey: @"gid"];
    __gid_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__gid_isset)
  {
    [encoder encodeInt64: __gid forKey: @"gid"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (int64_t) gid {
  return __gid;
}

- (void) setGid: (int64_t) gid {
  __gid = gid;
  __gid_isset = YES;
}

- (BOOL) gidIsSet {
  return __gid_isset;
}

- (void) unsetGid {
  __gid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setGid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"user_get_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gid_isset) {
    [outProtocol writeFieldBeginWithName: @"gid" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __gid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"user_get_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",gid:"];
  [ms appendFormat: @"%qi", __gid];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface User_get_result : NSObject <NSCoding> {
  User * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) User * success;
#endif

- (id) initWithSuccess: (User *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (User *) success;
- (void) setSuccess: (User *) success;
- (BOOL) successIsSet;

@end

@implementation User_get_result

- (id) initWithSuccess: (User *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (User *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (User *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          User *fieldValue = [[User alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"User_get_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"User_get_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface user_set_args : NSObject <NSCoding> {
  NSString * __access_token;
  User * __user;

  BOOL __access_token_isset;
  BOOL __user_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
@property (nonatomic, retain, getter=user, setter=setUser:) User * user;
#endif

- (id) initWithAccess_token: (NSString *) access_token user: (User *) user;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

- (User *) user;
- (void) setUser: (User *) user;
- (BOOL) userIsSet;

@end

@implementation user_set_args

- (id) initWithAccess_token: (NSString *) access_token user: (User *) user
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __user = [user retain];
  __user_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"user"])
  {
    __user = [[decoder decodeObjectForKey: @"user"] retain];
    __user_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__user_isset)
  {
    [encoder encodeObject: __user forKey: @"user"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [__user release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (User *) user {
  return [[__user retain] autorelease];
}

- (void) setUser: (User *) user {
  [user retain];
  [__user release];
  __user = user;
  __user_isset = YES;
}

- (BOOL) userIsSet {
  return __user_isset;
}

- (void) unsetUser {
  [__user release];
  __user = nil;
  __user_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          User *fieldValue = [[User alloc] init];
          [fieldValue read: inProtocol];
          [self setUser: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"user_set_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_isset) {
    if (__user != nil) {
      [outProtocol writeFieldBeginWithName: @"user" type: TType_STRUCT fieldID: 2];
      [__user write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"user_set_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",user:"];
  [ms appendFormat: @"%@", __user];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface User_set_result : NSObject <NSCoding> {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation User_set_result

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"User_set_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"User_set_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ClassNoteClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_login_by_mail: (int64_t) client_id : (NSString *) client_secret : (NSString *) mail : (NSString *) password
{
  [outProtocol writeMessageBeginWithName: @"login_by_mail" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"login_by_mail_args"];
  [outProtocol writeFieldBeginWithName: @"client_id" type: TType_I64 fieldID: 1];
  [outProtocol writeI64: client_id];
  [outProtocol writeFieldEnd];
  if (client_secret != nil)  {
    [outProtocol writeFieldBeginWithName: @"client_secret" type: TType_STRING fieldID: 2];
    [outProtocol writeString: client_secret];
    [outProtocol writeFieldEnd];
  }
  if (mail != nil)  {
    [outProtocol writeFieldBeginWithName: @"mail" type: TType_STRING fieldID: 3];
    [outProtocol writeString: mail];
    [outProtocol writeFieldEnd];
  }
  if (password != nil)  {
    [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 4];
    [outProtocol writeString: password];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (AuthResponse *) recv_login_by_mail
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Login_by_mail_result * result = [[[Login_by_mail_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"login_by_mail failed: unknown result"];
}

- (AuthResponse *) login_by_mail: (int64_t) client_id : (NSString *) client_secret : (NSString *) mail : (NSString *) password
{
  [self send_login_by_mail: client_id : client_secret : mail : password];
  return [self recv_login_by_mail];
}

- (void) send_logout: (NSString *) access_token
{
  [outProtocol writeMessageBeginWithName: @"logout" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"logout_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_logout
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Logout_result * result = [[[Logout_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) logout: (NSString *) access_token
{
  [self send_logout: access_token];
  [self recv_logout];
}

- (void) send_user_get: (NSString *) access_token : (int64_t) gid
{
  [outProtocol writeMessageBeginWithName: @"user_get" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"user_get_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"gid" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: gid];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (User *) recv_user_get
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  User_get_result * result = [[[User_get_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"user_get failed: unknown result"];
}

- (User *) user_get: (NSString *) access_token : (int64_t) gid
{
  [self send_user_get: access_token : gid];
  return [self recv_user_get];
}

- (void) send_user_set: (NSString *) access_token : (User *) user
{
  [outProtocol writeMessageBeginWithName: @"user_set" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"user_set_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  if (user != nil)  {
    [outProtocol writeFieldBeginWithName: @"user" type: TType_STRUCT fieldID: 2];
    [user write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_user_set
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  User_set_result * result = [[[User_set_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) user_set: (NSString *) access_token : (User *) user
{
  [self send_user_set: access_token : user];
  [self recv_user_set];
}

@end

@implementation ClassNoteProcessor

- (id) initWithClassNote: (id <ClassNote>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_login_by_mail_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"login_by_mail"];
  }
  {
    SEL s = @selector(process_logout_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"logout"];
  }
  {
    SEL s = @selector(process_user_get_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"user_get"];
  }
  {
    SEL s = @selector(process_user_set_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"user_set"];
  }
  return self;
}

- (id<ClassNote>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_login_by_mail_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  login_by_mail_args * args = [[login_by_mail_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Login_by_mail_result * result = [[Login_by_mail_result alloc] init];
  [result setSuccess: [mService login_by_mail: [args client_id]: [args client_secret]: [args mail]: [args password]]];
  [outProtocol writeMessageBeginWithName: @"login_by_mail"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_logout_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  logout_args * args = [[logout_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Logout_result * result = [[Logout_result alloc] init];
  [mService logout: [args access_token]];
  [outProtocol writeMessageBeginWithName: @"logout"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_user_get_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  user_get_args * args = [[user_get_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  User_get_result * result = [[User_get_result alloc] init];
  [result setSuccess: [mService user_get: [args access_token]: [args gid]]];
  [outProtocol writeMessageBeginWithName: @"user_get"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_user_set_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  user_set_args * args = [[user_set_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  User_set_result * result = [[User_set_result alloc] init];
  [mService user_set: [args access_token]: [args user]];
  [outProtocol writeMessageBeginWithName: @"user_set"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}

@end

