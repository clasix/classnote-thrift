/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>


#import "type.h"

@implementation AuthResponse

- (id) initWithAuth_token: (NSString *) auth_token expire_in: (timestamp) expire_in user_id: (int64_t) user_id
{
  self = [super init];
  __auth_token = [auth_token retain];
  __auth_token_isset = YES;
  __expire_in = expire_in;
  __expire_in_isset = YES;
  __user_id = user_id;
  __user_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth_token"])
  {
    __auth_token = [[decoder decodeObjectForKey: @"auth_token"] retain];
    __auth_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"expire_in"])
  {
    __expire_in = [decoder decodeInt64ForKey: @"expire_in"];
    __expire_in_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_id"])
  {
    __user_id = [decoder decodeInt64ForKey: @"user_id"];
    __user_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_token_isset)
  {
    [encoder encodeObject: __auth_token forKey: @"auth_token"];
  }
  if (__expire_in_isset)
  {
    [encoder encodeInt64: __expire_in forKey: @"expire_in"];
  }
  if (__user_id_isset)
  {
    [encoder encodeInt64: __user_id forKey: @"user_id"];
  }
}

- (void) dealloc
{
  [__auth_token release];
  [super dealloc];
}

- (NSString *) auth_token {
  return [[__auth_token retain] autorelease];
}

- (void) setAuth_token: (NSString *) auth_token {
  [auth_token retain];
  [__auth_token release];
  __auth_token = auth_token;
  __auth_token_isset = YES;
}

- (BOOL) auth_tokenIsSet {
  return __auth_token_isset;
}

- (void) unsetAuth_token {
  [__auth_token release];
  __auth_token = nil;
  __auth_token_isset = NO;
}

- (int64_t) expire_in {
  return __expire_in;
}

- (void) setExpire_in: (int64_t) expire_in {
  __expire_in = expire_in;
  __expire_in_isset = YES;
}

- (BOOL) expire_inIsSet {
  return __expire_in_isset;
}

- (void) unsetExpire_in {
  __expire_in_isset = NO;
}

- (int64_t) user_id {
  return __user_id;
}

- (void) setUser_id: (int64_t) user_id {
  __user_id = user_id;
  __user_id_isset = YES;
}

- (BOOL) user_idIsSet {
  return __user_id_isset;
}

- (void) unsetUser_id {
  __user_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuth_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setExpire_in: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUser_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthResponse"];
  if (__auth_token_isset) {
    if (__auth_token != nil) {
      [outProtocol writeFieldBeginWithName: @"auth_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __auth_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__expire_in_isset) {
    [outProtocol writeFieldBeginWithName: @"expire_in" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __expire_in];
    [outProtocol writeFieldEnd];
  }
  if (__user_id_isset) {
    [outProtocol writeFieldBeginWithName: @"user_id" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __user_id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthResponse("];
  [ms appendString: @"auth_token:"];
  [ms appendFormat: @"\"%@\"", __auth_token];
  [ms appendString: @",expire_in:"];
  [ms appendFormat: @"%qi", __expire_in];
  [ms appendString: @",user_id:"];
  [ms appendFormat: @"%qi", __user_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation User

- (id) initWithGid: (int64_t) gid name: (NSString *) name gender: (int) gender
{
  self = [super init];
  __gid = gid;
  __gid_isset = YES;
  __name = [name retain];
  __name_isset = YES;
  __gender = gender;
  __gender_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"gid"])
  {
    __gid = [decoder decodeInt64ForKey: @"gid"];
    __gid_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [decoder decodeIntForKey: @"gender"];
    __gender_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__gid_isset)
  {
    [encoder encodeInt64: __gid forKey: @"gid"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__gender_isset)
  {
    [encoder encodeInt: __gender forKey: @"gender"];
  }
}

- (void) dealloc
{
  [__name release];
  [super dealloc];
}

- (int64_t) gid {
  return __gid;
}

- (void) setGid: (int64_t) gid {
  __gid = gid;
  __gid_isset = YES;
}

- (BOOL) gidIsSet {
  return __gid_isset;
}

- (void) unsetGid {
  __gid_isset = NO;
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (int) gender {
  return __gender;
}

- (void) setGender: (int) gender {
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  __gender_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setGid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"User"];
  if (__gid_isset) {
    [outProtocol writeFieldBeginWithName: @"gid" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __gid];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    [outProtocol writeFieldBeginWithName: @"gender" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __gender];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"User("];
  [ms appendString: @"gid:"];
  [ms appendFormat: @"%qi", __gid];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"%i", __gender];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Clazz

- (id) initWithGid: (int64_t) gid school: (NSString *) school dept: (NSString *) dept major: (NSString *) major year: (int16_t) year
{
  self = [super init];
  __gid = gid;
  __gid_isset = YES;
  __school = [school retain];
  __school_isset = YES;
  __dept = [dept retain];
  __dept_isset = YES;
  __major = [major retain];
  __major_isset = YES;
  __year = year;
  __year_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"gid"])
  {
    __gid = [decoder decodeInt64ForKey: @"gid"];
    __gid_isset = YES;
  }
  if ([decoder containsValueForKey: @"school"])
  {
    __school = [[decoder decodeObjectForKey: @"school"] retain];
    __school_isset = YES;
  }
  if ([decoder containsValueForKey: @"dept"])
  {
    __dept = [[decoder decodeObjectForKey: @"dept"] retain];
    __dept_isset = YES;
  }
  if ([decoder containsValueForKey: @"major"])
  {
    __major = [[decoder decodeObjectForKey: @"major"] retain];
    __major_isset = YES;
  }
  if ([decoder containsValueForKey: @"year"])
  {
    __year = [decoder decodeIntForKey: @"year"];
    __year_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__gid_isset)
  {
    [encoder encodeInt64: __gid forKey: @"gid"];
  }
  if (__school_isset)
  {
    [encoder encodeObject: __school forKey: @"school"];
  }
  if (__dept_isset)
  {
    [encoder encodeObject: __dept forKey: @"dept"];
  }
  if (__major_isset)
  {
    [encoder encodeObject: __major forKey: @"major"];
  }
  if (__year_isset)
  {
    [encoder encodeInt: __year forKey: @"year"];
  }
}

- (void) dealloc
{
  [__school release];
  [__dept release];
  [__major release];
  [super dealloc];
}

- (int64_t) gid {
  return __gid;
}

- (void) setGid: (int64_t) gid {
  __gid = gid;
  __gid_isset = YES;
}

- (BOOL) gidIsSet {
  return __gid_isset;
}

- (void) unsetGid {
  __gid_isset = NO;
}

- (NSString *) school {
  return [[__school retain] autorelease];
}

- (void) setSchool: (NSString *) school {
  [school retain];
  [__school release];
  __school = school;
  __school_isset = YES;
}

- (BOOL) schoolIsSet {
  return __school_isset;
}

- (void) unsetSchool {
  [__school release];
  __school = nil;
  __school_isset = NO;
}

- (NSString *) dept {
  return [[__dept retain] autorelease];
}

- (void) setDept: (NSString *) dept {
  [dept retain];
  [__dept release];
  __dept = dept;
  __dept_isset = YES;
}

- (BOOL) deptIsSet {
  return __dept_isset;
}

- (void) unsetDept {
  [__dept release];
  __dept = nil;
  __dept_isset = NO;
}

- (NSString *) major {
  return [[__major retain] autorelease];
}

- (void) setMajor: (NSString *) major {
  [major retain];
  [__major release];
  __major = major;
  __major_isset = YES;
}

- (BOOL) majorIsSet {
  return __major_isset;
}

- (void) unsetMajor {
  [__major release];
  __major = nil;
  __major_isset = NO;
}

- (int16_t) year {
  return __year;
}

- (void) setYear: (int16_t) year {
  __year = year;
  __year_isset = YES;
}

- (BOOL) yearIsSet {
  return __year_isset;
}

- (void) unsetYear {
  __year_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setGid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSchool: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDept: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMajor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setYear: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Clazz"];
  if (__gid_isset) {
    [outProtocol writeFieldBeginWithName: @"gid" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __gid];
    [outProtocol writeFieldEnd];
  }
  if (__school_isset) {
    if (__school != nil) {
      [outProtocol writeFieldBeginWithName: @"school" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __school];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dept_isset) {
    if (__dept != nil) {
      [outProtocol writeFieldBeginWithName: @"dept" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __dept];
      [outProtocol writeFieldEnd];
    }
  }
  if (__major_isset) {
    if (__major != nil) {
      [outProtocol writeFieldBeginWithName: @"major" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __major];
      [outProtocol writeFieldEnd];
    }
  }
  if (__year_isset) {
    [outProtocol writeFieldBeginWithName: @"year" type: TType_I16 fieldID: 5];
    [outProtocol writeI16: __year];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Clazz("];
  [ms appendString: @"gid:"];
  [ms appendFormat: @"%qi", __gid];
  [ms appendString: @",school:"];
  [ms appendFormat: @"\"%@\"", __school];
  [ms appendString: @",dept:"];
  [ms appendFormat: @"\"%@\"", __dept];
  [ms appendString: @",major:"];
  [ms appendFormat: @"\"%@\"", __major];
  [ms appendString: @",year:"];
  [ms appendFormat: @"%hi", __year];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Course

- (id) initWithGid: (int64_t) gid name: (NSString *) name tearcher: (NSString *) tearcher book: (NSString *) book for_class: (Clazz *) for_class for_semster: (int16_t) for_semster
{
  self = [super init];
  __gid = gid;
  __gid_isset = YES;
  __name = [name retain];
  __name_isset = YES;
  __tearcher = [tearcher retain];
  __tearcher_isset = YES;
  __book = [book retain];
  __book_isset = YES;
  __for_class = [for_class retain];
  __for_class_isset = YES;
  __for_semster = for_semster;
  __for_semster_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"gid"])
  {
    __gid = [decoder decodeInt64ForKey: @"gid"];
    __gid_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"tearcher"])
  {
    __tearcher = [[decoder decodeObjectForKey: @"tearcher"] retain];
    __tearcher_isset = YES;
  }
  if ([decoder containsValueForKey: @"book"])
  {
    __book = [[decoder decodeObjectForKey: @"book"] retain];
    __book_isset = YES;
  }
  if ([decoder containsValueForKey: @"for_class"])
  {
    __for_class = [[decoder decodeObjectForKey: @"for_class"] retain];
    __for_class_isset = YES;
  }
  if ([decoder containsValueForKey: @"for_semster"])
  {
    __for_semster = [decoder decodeIntForKey: @"for_semster"];
    __for_semster_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__gid_isset)
  {
    [encoder encodeInt64: __gid forKey: @"gid"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__tearcher_isset)
  {
    [encoder encodeObject: __tearcher forKey: @"tearcher"];
  }
  if (__book_isset)
  {
    [encoder encodeObject: __book forKey: @"book"];
  }
  if (__for_class_isset)
  {
    [encoder encodeObject: __for_class forKey: @"for_class"];
  }
  if (__for_semster_isset)
  {
    [encoder encodeInt: __for_semster forKey: @"for_semster"];
  }
}

- (void) dealloc
{
  [__name release];
  [__tearcher release];
  [__book release];
  [__for_class release];
  [super dealloc];
}

- (int64_t) gid {
  return __gid;
}

- (void) setGid: (int64_t) gid {
  __gid = gid;
  __gid_isset = YES;
}

- (BOOL) gidIsSet {
  return __gid_isset;
}

- (void) unsetGid {
  __gid_isset = NO;
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) tearcher {
  return [[__tearcher retain] autorelease];
}

- (void) setTearcher: (NSString *) tearcher {
  [tearcher retain];
  [__tearcher release];
  __tearcher = tearcher;
  __tearcher_isset = YES;
}

- (BOOL) tearcherIsSet {
  return __tearcher_isset;
}

- (void) unsetTearcher {
  [__tearcher release];
  __tearcher = nil;
  __tearcher_isset = NO;
}

- (NSString *) book {
  return [[__book retain] autorelease];
}

- (void) setBook: (NSString *) book {
  [book retain];
  [__book release];
  __book = book;
  __book_isset = YES;
}

- (BOOL) bookIsSet {
  return __book_isset;
}

- (void) unsetBook {
  [__book release];
  __book = nil;
  __book_isset = NO;
}

- (Clazz *) for_class {
  return [[__for_class retain] autorelease];
}

- (void) setFor_class: (Clazz *) for_class {
  [for_class retain];
  [__for_class release];
  __for_class = for_class;
  __for_class_isset = YES;
}

- (BOOL) for_classIsSet {
  return __for_class_isset;
}

- (void) unsetFor_class {
  [__for_class release];
  __for_class = nil;
  __for_class_isset = NO;
}

- (int16_t) for_semster {
  return __for_semster;
}

- (void) setFor_semster: (int16_t) for_semster {
  __for_semster = for_semster;
  __for_semster_isset = YES;
}

- (BOOL) for_semsterIsSet {
  return __for_semster_isset;
}

- (void) unsetFor_semster {
  __for_semster_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setGid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTearcher: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBook: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          Clazz *fieldValue = [[Clazz alloc] init];
          [fieldValue read: inProtocol];
          [self setFor_class: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setFor_semster: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Course"];
  if (__gid_isset) {
    [outProtocol writeFieldBeginWithName: @"gid" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __gid];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tearcher_isset) {
    if (__tearcher != nil) {
      [outProtocol writeFieldBeginWithName: @"tearcher" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __tearcher];
      [outProtocol writeFieldEnd];
    }
  }
  if (__book_isset) {
    if (__book != nil) {
      [outProtocol writeFieldBeginWithName: @"book" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __book];
      [outProtocol writeFieldEnd];
    }
  }
  if (__for_class_isset) {
    if (__for_class != nil) {
      [outProtocol writeFieldBeginWithName: @"for_class" type: TType_STRUCT fieldID: 5];
      [__for_class write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__for_semster_isset) {
    [outProtocol writeFieldBeginWithName: @"for_semster" type: TType_I16 fieldID: 6];
    [outProtocol writeI16: __for_semster];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Course("];
  [ms appendString: @"gid:"];
  [ms appendFormat: @"%qi", __gid];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",tearcher:"];
  [ms appendFormat: @"\"%@\"", __tearcher];
  [ms appendString: @",book:"];
  [ms appendFormat: @"\"%@\"", __book];
  [ms appendString: @",for_class:"];
  [ms appendFormat: @"%@", __for_class];
  [ms appendString: @",for_semster:"];
  [ms appendFormat: @"%hi", __for_semster];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LessonInfo

- (id) initWithGid: (int64_t) gid course: (Course *) course room: (NSString *) room weekday: (int16_t) weekday start: (int16_t) start duration: (int16_t) duration
{
  self = [super init];
  __gid = gid;
  __gid_isset = YES;
  __course = [course retain];
  __course_isset = YES;
  __room = [room retain];
  __room_isset = YES;
  __weekday = weekday;
  __weekday_isset = YES;
  __start = start;
  __start_isset = YES;
  __duration = duration;
  __duration_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"gid"])
  {
    __gid = [decoder decodeInt64ForKey: @"gid"];
    __gid_isset = YES;
  }
  if ([decoder containsValueForKey: @"course"])
  {
    __course = [[decoder decodeObjectForKey: @"course"] retain];
    __course_isset = YES;
  }
  if ([decoder containsValueForKey: @"room"])
  {
    __room = [[decoder decodeObjectForKey: @"room"] retain];
    __room_isset = YES;
  }
  if ([decoder containsValueForKey: @"weekday"])
  {
    __weekday = [decoder decodeIntForKey: @"weekday"];
    __weekday_isset = YES;
  }
  if ([decoder containsValueForKey: @"start"])
  {
    __start = [decoder decodeIntForKey: @"start"];
    __start_isset = YES;
  }
  if ([decoder containsValueForKey: @"duration"])
  {
    __duration = [decoder decodeIntForKey: @"duration"];
    __duration_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__gid_isset)
  {
    [encoder encodeInt64: __gid forKey: @"gid"];
  }
  if (__course_isset)
  {
    [encoder encodeObject: __course forKey: @"course"];
  }
  if (__room_isset)
  {
    [encoder encodeObject: __room forKey: @"room"];
  }
  if (__weekday_isset)
  {
    [encoder encodeInt: __weekday forKey: @"weekday"];
  }
  if (__start_isset)
  {
    [encoder encodeInt: __start forKey: @"start"];
  }
  if (__duration_isset)
  {
    [encoder encodeInt: __duration forKey: @"duration"];
  }
}

- (void) dealloc
{
  [__course release];
  [__room release];
  [super dealloc];
}

- (int64_t) gid {
  return __gid;
}

- (void) setGid: (int64_t) gid {
  __gid = gid;
  __gid_isset = YES;
}

- (BOOL) gidIsSet {
  return __gid_isset;
}

- (void) unsetGid {
  __gid_isset = NO;
}

- (Course *) course {
  return [[__course retain] autorelease];
}

- (void) setCourse: (Course *) course {
  [course retain];
  [__course release];
  __course = course;
  __course_isset = YES;
}

- (BOOL) courseIsSet {
  return __course_isset;
}

- (void) unsetCourse {
  [__course release];
  __course = nil;
  __course_isset = NO;
}

- (NSString *) room {
  return [[__room retain] autorelease];
}

- (void) setRoom: (NSString *) room {
  [room retain];
  [__room release];
  __room = room;
  __room_isset = YES;
}

- (BOOL) roomIsSet {
  return __room_isset;
}

- (void) unsetRoom {
  [__room release];
  __room = nil;
  __room_isset = NO;
}

- (int16_t) weekday {
  return __weekday;
}

- (void) setWeekday: (int16_t) weekday {
  __weekday = weekday;
  __weekday_isset = YES;
}

- (BOOL) weekdayIsSet {
  return __weekday_isset;
}

- (void) unsetWeekday {
  __weekday_isset = NO;
}

- (int16_t) start {
  return __start;
}

- (void) setStart: (int16_t) start {
  __start = start;
  __start_isset = YES;
}

- (BOOL) startIsSet {
  return __start_isset;
}

- (void) unsetStart {
  __start_isset = NO;
}

- (int16_t) duration {
  return __duration;
}

- (void) setDuration: (int16_t) duration {
  __duration = duration;
  __duration_isset = YES;
}

- (BOOL) durationIsSet {
  return __duration_isset;
}

- (void) unsetDuration {
  __duration_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setGid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Course *fieldValue = [[Course alloc] init];
          [fieldValue read: inProtocol];
          [self setCourse: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRoom: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setWeekday: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setStart: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setDuration: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LessonInfo"];
  if (__gid_isset) {
    [outProtocol writeFieldBeginWithName: @"gid" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __gid];
    [outProtocol writeFieldEnd];
  }
  if (__course_isset) {
    if (__course != nil) {
      [outProtocol writeFieldBeginWithName: @"course" type: TType_STRUCT fieldID: 2];
      [__course write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__room_isset) {
    if (__room != nil) {
      [outProtocol writeFieldBeginWithName: @"room" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __room];
      [outProtocol writeFieldEnd];
    }
  }
  if (__weekday_isset) {
    [outProtocol writeFieldBeginWithName: @"weekday" type: TType_I16 fieldID: 4];
    [outProtocol writeI16: __weekday];
    [outProtocol writeFieldEnd];
  }
  if (__start_isset) {
    [outProtocol writeFieldBeginWithName: @"start" type: TType_I16 fieldID: 5];
    [outProtocol writeI16: __start];
    [outProtocol writeFieldEnd];
  }
  if (__duration_isset) {
    [outProtocol writeFieldBeginWithName: @"duration" type: TType_I16 fieldID: 6];
    [outProtocol writeI16: __duration];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LessonInfo("];
  [ms appendString: @"gid:"];
  [ms appendFormat: @"%qi", __gid];
  [ms appendString: @",course:"];
  [ms appendFormat: @"%@", __course];
  [ms appendString: @",room:"];
  [ms appendFormat: @"\"%@\"", __room];
  [ms appendString: @",weekday:"];
  [ms appendFormat: @"%hi", __weekday];
  [ms appendString: @",start:"];
  [ms appendFormat: @"%hi", __start];
  [ms appendString: @",duration:"];
  [ms appendFormat: @"%hi", __duration];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LessonTable

- (id) initWithGid: (int64_t) gid user_id: (int64_t) user_id semester: (int16_t) semester lessoninfos: (NSArray *) lessoninfos
{
  self = [super init];
  __gid = gid;
  __gid_isset = YES;
  __user_id = user_id;
  __user_id_isset = YES;
  __semester = semester;
  __semester_isset = YES;
  __lessoninfos = [lessoninfos retain];
  __lessoninfos_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"gid"])
  {
    __gid = [decoder decodeInt64ForKey: @"gid"];
    __gid_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_id"])
  {
    __user_id = [decoder decodeInt64ForKey: @"user_id"];
    __user_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"semester"])
  {
    __semester = [decoder decodeIntForKey: @"semester"];
    __semester_isset = YES;
  }
  if ([decoder containsValueForKey: @"lessoninfos"])
  {
    __lessoninfos = [[decoder decodeObjectForKey: @"lessoninfos"] retain];
    __lessoninfos_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__gid_isset)
  {
    [encoder encodeInt64: __gid forKey: @"gid"];
  }
  if (__user_id_isset)
  {
    [encoder encodeInt64: __user_id forKey: @"user_id"];
  }
  if (__semester_isset)
  {
    [encoder encodeInt: __semester forKey: @"semester"];
  }
  if (__lessoninfos_isset)
  {
    [encoder encodeObject: __lessoninfos forKey: @"lessoninfos"];
  }
}

- (void) dealloc
{
  [__lessoninfos release];
  [super dealloc];
}

- (int64_t) gid {
  return __gid;
}

- (void) setGid: (int64_t) gid {
  __gid = gid;
  __gid_isset = YES;
}

- (BOOL) gidIsSet {
  return __gid_isset;
}

- (void) unsetGid {
  __gid_isset = NO;
}

- (int64_t) user_id {
  return __user_id;
}

- (void) setUser_id: (int64_t) user_id {
  __user_id = user_id;
  __user_id_isset = YES;
}

- (BOOL) user_idIsSet {
  return __user_id_isset;
}

- (void) unsetUser_id {
  __user_id_isset = NO;
}

- (int16_t) semester {
  return __semester;
}

- (void) setSemester: (int16_t) semester {
  __semester = semester;
  __semester_isset = YES;
}

- (BOOL) semesterIsSet {
  return __semester_isset;
}

- (void) unsetSemester {
  __semester_isset = NO;
}

- (NSArray *) lessoninfos {
  return [[__lessoninfos retain] autorelease];
}

- (void) setLessoninfos: (NSArray *) lessoninfos {
  [lessoninfos retain];
  [__lessoninfos release];
  __lessoninfos = lessoninfos;
  __lessoninfos_isset = YES;
}

- (BOOL) lessoninfosIsSet {
  return __lessoninfos_isset;
}

- (void) unsetLessoninfos {
  [__lessoninfos release];
  __lessoninfos = nil;
  __lessoninfos_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setGid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUser_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setSemester: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            LessonInfo *_elem2 = [[LessonInfo alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release];
          }
          [inProtocol readListEnd];
          [self setLessoninfos: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LessonTable"];
  if (__gid_isset) {
    [outProtocol writeFieldBeginWithName: @"gid" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __gid];
    [outProtocol writeFieldEnd];
  }
  if (__user_id_isset) {
    [outProtocol writeFieldBeginWithName: @"user_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __user_id];
    [outProtocol writeFieldEnd];
  }
  if (__semester_isset) {
    [outProtocol writeFieldBeginWithName: @"semester" type: TType_I16 fieldID: 3];
    [outProtocol writeI16: __semester];
    [outProtocol writeFieldEnd];
  }
  if (__lessoninfos_isset) {
    if (__lessoninfos != nil) {
      [outProtocol writeFieldBeginWithName: @"lessoninfos" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__lessoninfos count]];
        int i4;
        for (i4 = 0; i4 < [__lessoninfos count]; i4++)
        {
          [[__lessoninfos objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LessonTable("];
  [ms appendString: @"gid:"];
  [ms appendFormat: @"%qi", __gid];
  [ms appendString: @",user_id:"];
  [ms appendFormat: @"%qi", __user_id];
  [ms appendString: @",semester:"];
  [ms appendFormat: @"%hi", __semester];
  [ms appendString: @",lessoninfos:"];
  [ms appendFormat: @"%@", __lessoninfos];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation typeConstants
+ (void) initialize {
}
@end

