/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>


#import "type.h"

@implementation AuthResponse

- (id) initWithAuth_token: (NSString *) auth_token expire_in: (timestamp) expire_in user_id: (int64_t) user_id
{
  self = [super init];
  __auth_token = [auth_token retain];
  __auth_token_isset = YES;
  __expire_in = expire_in;
  __expire_in_isset = YES;
  __user_id = user_id;
  __user_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth_token"])
  {
    __auth_token = [[decoder decodeObjectForKey: @"auth_token"] retain];
    __auth_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"expire_in"])
  {
    __expire_in = [decoder decodeInt64ForKey: @"expire_in"];
    __expire_in_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_id"])
  {
    __user_id = [decoder decodeInt64ForKey: @"user_id"];
    __user_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_token_isset)
  {
    [encoder encodeObject: __auth_token forKey: @"auth_token"];
  }
  if (__expire_in_isset)
  {
    [encoder encodeInt64: __expire_in forKey: @"expire_in"];
  }
  if (__user_id_isset)
  {
    [encoder encodeInt64: __user_id forKey: @"user_id"];
  }
}

- (void) dealloc
{
  [__auth_token release];
  [super dealloc];
}

- (NSString *) auth_token {
  return [[__auth_token retain] autorelease];
}

- (void) setAuth_token: (NSString *) auth_token {
  [auth_token retain];
  [__auth_token release];
  __auth_token = auth_token;
  __auth_token_isset = YES;
}

- (BOOL) auth_tokenIsSet {
  return __auth_token_isset;
}

- (void) unsetAuth_token {
  [__auth_token release];
  __auth_token = nil;
  __auth_token_isset = NO;
}

- (int64_t) expire_in {
  return __expire_in;
}

- (void) setExpire_in: (int64_t) expire_in {
  __expire_in = expire_in;
  __expire_in_isset = YES;
}

- (BOOL) expire_inIsSet {
  return __expire_in_isset;
}

- (void) unsetExpire_in {
  __expire_in_isset = NO;
}

- (int64_t) user_id {
  return __user_id;
}

- (void) setUser_id: (int64_t) user_id {
  __user_id = user_id;
  __user_id_isset = YES;
}

- (BOOL) user_idIsSet {
  return __user_id_isset;
}

- (void) unsetUser_id {
  __user_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuth_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setExpire_in: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUser_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthResponse"];
  if (__auth_token_isset) {
    if (__auth_token != nil) {
      [outProtocol writeFieldBeginWithName: @"auth_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __auth_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__expire_in_isset) {
    [outProtocol writeFieldBeginWithName: @"expire_in" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __expire_in];
    [outProtocol writeFieldEnd];
  }
  if (__user_id_isset) {
    [outProtocol writeFieldBeginWithName: @"user_id" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __user_id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthResponse("];
  [ms appendString: @"auth_token:"];
  [ms appendFormat: @"\"%@\"", __auth_token];
  [ms appendString: @",expire_in:"];
  [ms appendFormat: @"%qi", __expire_in];
  [ms appendString: @",user_id:"];
  [ms appendFormat: @"%qi", __user_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation User

- (id) initWithGid: (int64_t) gid name: (NSString *) name gender: (int) gender
{
  self = [super init];
  __gid = gid;
  __gid_isset = YES;
  __name = [name retain];
  __name_isset = YES;
  __gender = gender;
  __gender_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"gid"])
  {
    __gid = [decoder decodeInt64ForKey: @"gid"];
    __gid_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [decoder decodeIntForKey: @"gender"];
    __gender_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__gid_isset)
  {
    [encoder encodeInt64: __gid forKey: @"gid"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__gender_isset)
  {
    [encoder encodeInt: __gender forKey: @"gender"];
  }
}

- (void) dealloc
{
  [__name release];
  [super dealloc];
}

- (int64_t) gid {
  return __gid;
}

- (void) setGid: (int64_t) gid {
  __gid = gid;
  __gid_isset = YES;
}

- (BOOL) gidIsSet {
  return __gid_isset;
}

- (void) unsetGid {
  __gid_isset = NO;
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (int) gender {
  return __gender;
}

- (void) setGender: (int) gender {
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  __gender_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setGid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"User"];
  if (__gid_isset) {
    [outProtocol writeFieldBeginWithName: @"gid" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __gid];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    [outProtocol writeFieldBeginWithName: @"gender" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __gender];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"User("];
  [ms appendString: @"gid:"];
  [ms appendFormat: @"%qi", __gid];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"%i", __gender];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Lesson

- (id) initWithGid: (int64_t) gid name: (NSString *) name room: (NSString *) room
{
  self = [super init];
  __gid = gid;
  __gid_isset = YES;
  __name = [name retain];
  __name_isset = YES;
  __room = [room retain];
  __room_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"gid"])
  {
    __gid = [decoder decodeInt64ForKey: @"gid"];
    __gid_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"room"])
  {
    __room = [[decoder decodeObjectForKey: @"room"] retain];
    __room_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__gid_isset)
  {
    [encoder encodeInt64: __gid forKey: @"gid"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__room_isset)
  {
    [encoder encodeObject: __room forKey: @"room"];
  }
}

- (void) dealloc
{
  [__name release];
  [__room release];
  [super dealloc];
}

- (int64_t) gid {
  return __gid;
}

- (void) setGid: (int64_t) gid {
  __gid = gid;
  __gid_isset = YES;
}

- (BOOL) gidIsSet {
  return __gid_isset;
}

- (void) unsetGid {
  __gid_isset = NO;
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) room {
  return [[__room retain] autorelease];
}

- (void) setRoom: (NSString *) room {
  [room retain];
  [__room release];
  __room = room;
  __room_isset = YES;
}

- (BOOL) roomIsSet {
  return __room_isset;
}

- (void) unsetRoom {
  [__room release];
  __room = nil;
  __room_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setGid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRoom: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Lesson"];
  if (__gid_isset) {
    [outProtocol writeFieldBeginWithName: @"gid" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __gid];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__room_isset) {
    if (__room != nil) {
      [outProtocol writeFieldBeginWithName: @"room" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __room];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Lesson("];
  [ms appendString: @"gid:"];
  [ms appendFormat: @"%qi", __gid];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",room:"];
  [ms appendFormat: @"\"%@\"", __room];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Class

- (id) initWithLesson: (Lesson *) lesson weekday: (int) weekday start: (int16_t) start duration: (int16_t) duration
{
  self = [super init];
  __lesson = [lesson retain];
  __lesson_isset = YES;
  __weekday = weekday;
  __weekday_isset = YES;
  __start = start;
  __start_isset = YES;
  __duration = duration;
  __duration_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"lesson"])
  {
    __lesson = [[decoder decodeObjectForKey: @"lesson"] retain];
    __lesson_isset = YES;
  }
  if ([decoder containsValueForKey: @"weekday"])
  {
    __weekday = [decoder decodeIntForKey: @"weekday"];
    __weekday_isset = YES;
  }
  if ([decoder containsValueForKey: @"start"])
  {
    __start = [decoder decodeIntForKey: @"start"];
    __start_isset = YES;
  }
  if ([decoder containsValueForKey: @"duration"])
  {
    __duration = [decoder decodeIntForKey: @"duration"];
    __duration_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__lesson_isset)
  {
    [encoder encodeObject: __lesson forKey: @"lesson"];
  }
  if (__weekday_isset)
  {
    [encoder encodeInt: __weekday forKey: @"weekday"];
  }
  if (__start_isset)
  {
    [encoder encodeInt: __start forKey: @"start"];
  }
  if (__duration_isset)
  {
    [encoder encodeInt: __duration forKey: @"duration"];
  }
}

- (void) dealloc
{
  [__lesson release];
  [super dealloc];
}

- (Lesson *) lesson {
  return [[__lesson retain] autorelease];
}

- (void) setLesson: (Lesson *) lesson {
  [lesson retain];
  [__lesson release];
  __lesson = lesson;
  __lesson_isset = YES;
}

- (BOOL) lessonIsSet {
  return __lesson_isset;
}

- (void) unsetLesson {
  [__lesson release];
  __lesson = nil;
  __lesson_isset = NO;
}

- (int) weekday {
  return __weekday;
}

- (void) setWeekday: (int) weekday {
  __weekday = weekday;
  __weekday_isset = YES;
}

- (BOOL) weekdayIsSet {
  return __weekday_isset;
}

- (void) unsetWeekday {
  __weekday_isset = NO;
}

- (int16_t) start {
  return __start;
}

- (void) setStart: (int16_t) start {
  __start = start;
  __start_isset = YES;
}

- (BOOL) startIsSet {
  return __start_isset;
}

- (void) unsetStart {
  __start_isset = NO;
}

- (int16_t) duration {
  return __duration;
}

- (void) setDuration: (int16_t) duration {
  __duration = duration;
  __duration_isset = YES;
}

- (BOOL) durationIsSet {
  return __duration_isset;
}

- (void) unsetDuration {
  __duration_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Lesson *fieldValue = [[Lesson alloc] init];
          [fieldValue read: inProtocol];
          [self setLesson: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setWeekday: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setStart: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setDuration: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Class"];
  if (__lesson_isset) {
    if (__lesson != nil) {
      [outProtocol writeFieldBeginWithName: @"lesson" type: TType_STRUCT fieldID: 1];
      [__lesson write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__weekday_isset) {
    [outProtocol writeFieldBeginWithName: @"weekday" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __weekday];
    [outProtocol writeFieldEnd];
  }
  if (__start_isset) {
    [outProtocol writeFieldBeginWithName: @"start" type: TType_I16 fieldID: 3];
    [outProtocol writeI16: __start];
    [outProtocol writeFieldEnd];
  }
  if (__duration_isset) {
    [outProtocol writeFieldBeginWithName: @"duration" type: TType_I16 fieldID: 4];
    [outProtocol writeI16: __duration];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Class("];
  [ms appendString: @"lesson:"];
  [ms appendFormat: @"%@", __lesson];
  [ms appendString: @",weekday:"];
  [ms appendFormat: @"%i", __weekday];
  [ms appendString: @",start:"];
  [ms appendFormat: @"%hi", __start];
  [ms appendString: @",duration:"];
  [ms appendFormat: @"%hi", __duration];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation typeConstants
+ (void) initialize {
}
@end

