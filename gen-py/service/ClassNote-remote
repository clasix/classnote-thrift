#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import ClassNote
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  AuthResponse login_by_email(string email, string password)'
  print '  bool sign_up_email(string email, string password)'
  print '  bool sign_out(string auth_token)'
  print '   get_lessontables(string auth_token)'
  print '  bool create_lessontable(string auth_token)'
  print '   dept_provinces(string auth_token)'
  print '   dept_schools(string auth_token, string province)'
  print '   dept_departments(string auth_token, string province, string school)'
  print '  string dept_code(string auth_token, string province, string school, string dept)'
  print '  SyncState getSyncState(string auth_token)'
  print '  SyncChunk getSyncChunk(string auth_token, i32 afterUSN, i32 maxEntries, bool fullSyncOnly)'
  print '  SyncChunk getFilteredSyncChunk(string auth_token, i32 afterUSN, i32 maxEntries, SyncChunkFilter filter)'
  print '  SyncState getSchoolLessonSyncState(string auth_token, string school_code)'
  print '  SyncChunk getSchoolLessonSyncChunk(string auth_token, string school_code, i32 afterUSN, i32 maxEntries, bool fullSyncOnly)'
  print '  Course createCourse(string auth_token, Course course)'
  print '  i32 updateCourse(string auth_token, Course course)'
  print '  i32 expungeCourse(string auth_token, Guid guid)'
  print '  User user_get(string auth_token, i64 user_id)'
  print '  bool lessontable_set(string auth_token, i64 user_id,  lesson_tables)'
  print '  AuthResponse login_by_username(string username, string password)'
  print '  bool sign_up_username(string username, string password)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ClassNote.Client(protocol)
transport.open()

if cmd == 'login_by_email':
  if len(args) != 2:
    print 'login_by_email requires 2 args'
    sys.exit(1)
  pp.pprint(client.login_by_email(args[0],args[1],))

elif cmd == 'sign_up_email':
  if len(args) != 2:
    print 'sign_up_email requires 2 args'
    sys.exit(1)
  pp.pprint(client.sign_up_email(args[0],args[1],))

elif cmd == 'sign_out':
  if len(args) != 1:
    print 'sign_out requires 1 args'
    sys.exit(1)
  pp.pprint(client.sign_out(args[0],))

elif cmd == 'get_lessontables':
  if len(args) != 1:
    print 'get_lessontables requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_lessontables(args[0],))

elif cmd == 'create_lessontable':
  if len(args) != 1:
    print 'create_lessontable requires 1 args'
    sys.exit(1)
  pp.pprint(client.create_lessontable(args[0],))

elif cmd == 'dept_provinces':
  if len(args) != 1:
    print 'dept_provinces requires 1 args'
    sys.exit(1)
  pp.pprint(client.dept_provinces(args[0],))

elif cmd == 'dept_schools':
  if len(args) != 2:
    print 'dept_schools requires 2 args'
    sys.exit(1)
  pp.pprint(client.dept_schools(args[0],args[1],))

elif cmd == 'dept_departments':
  if len(args) != 3:
    print 'dept_departments requires 3 args'
    sys.exit(1)
  pp.pprint(client.dept_departments(args[0],args[1],args[2],))

elif cmd == 'dept_code':
  if len(args) != 4:
    print 'dept_code requires 4 args'
    sys.exit(1)
  pp.pprint(client.dept_code(args[0],args[1],args[2],args[3],))

elif cmd == 'getSyncState':
  if len(args) != 1:
    print 'getSyncState requires 1 args'
    sys.exit(1)
  pp.pprint(client.getSyncState(args[0],))

elif cmd == 'getSyncChunk':
  if len(args) != 4:
    print 'getSyncChunk requires 4 args'
    sys.exit(1)
  pp.pprint(client.getSyncChunk(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'getFilteredSyncChunk':
  if len(args) != 4:
    print 'getFilteredSyncChunk requires 4 args'
    sys.exit(1)
  pp.pprint(client.getFilteredSyncChunk(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'getSchoolLessonSyncState':
  if len(args) != 2:
    print 'getSchoolLessonSyncState requires 2 args'
    sys.exit(1)
  pp.pprint(client.getSchoolLessonSyncState(args[0],args[1],))

elif cmd == 'getSchoolLessonSyncChunk':
  if len(args) != 5:
    print 'getSchoolLessonSyncChunk requires 5 args'
    sys.exit(1)
  pp.pprint(client.getSchoolLessonSyncChunk(args[0],args[1],eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'createCourse':
  if len(args) != 2:
    print 'createCourse requires 2 args'
    sys.exit(1)
  pp.pprint(client.createCourse(args[0],eval(args[1]),))

elif cmd == 'updateCourse':
  if len(args) != 2:
    print 'updateCourse requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateCourse(args[0],eval(args[1]),))

elif cmd == 'expungeCourse':
  if len(args) != 2:
    print 'expungeCourse requires 2 args'
    sys.exit(1)
  pp.pprint(client.expungeCourse(args[0],eval(args[1]),))

elif cmd == 'user_get':
  if len(args) != 2:
    print 'user_get requires 2 args'
    sys.exit(1)
  pp.pprint(client.user_get(args[0],eval(args[1]),))

elif cmd == 'lessontable_set':
  if len(args) != 3:
    print 'lessontable_set requires 3 args'
    sys.exit(1)
  pp.pprint(client.lessontable_set(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'login_by_username':
  if len(args) != 2:
    print 'login_by_username requires 2 args'
    sys.exit(1)
  pp.pprint(client.login_by_username(args[0],args[1],))

elif cmd == 'sign_up_username':
  if len(args) != 2:
    print 'sign_up_username requires 2 args'
    sys.exit(1)
  pp.pprint(client.sign_up_username(args[0],args[1],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
